'use client';

import React from 'react';
import { Badge } from '@/components/ui/Badge';
import { AlertTriangle, Shield } from 'lucide-react';
import { getVulnerabilityStatus } from '@/types/client';
import type { VulnerabilityAssessment } from '@/types/client';

export interface VulnerabilityBadgeProps {
  vulnerabilityAssessment?: VulnerabilityAssessment;
  isVulnerable?: boolean;
  size?: 'sm' | 'md' | 'lg';
  showDetails?: boolean;
}

export function VulnerabilityBadge({ 
  vulnerabilityAssessment,
  isVulnerable: explicitVulnerable,
  size = 'md',
  showDetails = false
}: VulnerabilityBadgeProps) {
  const isVulnerable = explicitVulnerable !== undefined 
    ? explicitVulnerable 
    : getVulnerabilityStatus(vulnerabilityAssessment);

  // Handle unknown/undefined state
  if (isVulnerable === undefined || isVulnerable === null) {
    return (
      <Badge 
        variant="secondary" 
        className={`flex items-center space-x-1 ${getSizeClasses(size)}`}
      >
        <Shield className={getIconSize(size)} />
        <span>Not Assessed</span>
      </Badge>
    );
  }

  // Handle vulnerable clients
  if (isVulnerable === true) {
    return (
      <Badge 
        className={`bg-red-100 text-red-800 border-red-200 flex items-center space-x-1 ${getSizeClasses(size)}`}
      >
        <AlertTriangle className={getIconSize(size)} />
        <span>Vulnerable</span>
        {showDetails && vulnerabilityAssessment?.vulnerabilityFactors && (
          <span className="text-xs">
            ({vulnerabilityAssessment.vulnerabilityFactors.length} factors)
          </span>
        )}
      </Badge>
    );
  }

  // Handle non-vulnerable clients
  return (
    <Badge 
      className={`bg-green-100 text-green-800 border-green-200 flex items-center space-x-1 ${getSizeClasses(size)}`}
    >
      <Shield className={getIconSize(size)} />
      <span>Protected</span>
    </Badge>
  );
}

// Helper functions for consistent styling
function getSizeClasses(size: 'sm' | 'md' | 'lg'): string {
  switch (size) {
    case 'sm':
      return 'text-xs px-2 py-1';
    case 'lg':
      return 'text-base px-4 py-2';
    case 'md':
    default:
      return 'text-sm px-3 py-1';
  }
}

function getIconSize(size: 'sm' | 'md' | 'lg'): string {
  switch (size) {
    case 'sm':
      return 'h-3 w-3';
    case 'lg':
      return 'h-5 w-5';
    case 'md':
    default:
      return 'h-4 w-4';
  }
}

export function VulnerabilityStatus({ 
  vulnerabilityAssessment 
}: { 
  vulnerabilityAssessment?: VulnerabilityAssessment 
}) {
  const isVulnerable = getVulnerabilityStatus(vulnerabilityAssessment);
  
  if (isVulnerable === true) {
    return (
      <div className="flex items-center space-x-2 text-red-600">
        <AlertTriangle className="h-4 w-4" />
        <span className="font-medium">Client is considered vulnerable</span>
      </div>
    );
  }
  
  if (isVulnerable === false) {
    return (
      <div className="flex items-center space-x-2 text-green-600">
        <Shield className="h-4 w-4" />
        <span className="font-medium">Client is not considered vulnerable</span>
      </div>
    );
  }
  
  return (
    <div className="flex items-center space-x-2 text-gray-600">
      <Shield className="h-4 w-4" />
      <span className="font-medium">Vulnerability assessment not completed</span>
    </div>
  );
}

export function VulnerabilityFactors({ 
  vulnerabilityAssessment 
}: { 
  vulnerabilityAssessment?: VulnerabilityAssessment 
}) {
  const isVulnerable = getVulnerabilityStatus(vulnerabilityAssessment);
  
  if (!isVulnerable || !vulnerabilityAssessment?.vulnerabilityFactors) {
    return null;
  }
  
  return (
    <div className="mt-3">
      <h4 className="text-sm font-medium text-gray-700 mb-2">Vulnerability Factors:</h4>
      <div className="flex flex-wrap gap-1">
        {vulnerabilityAssessment.vulnerabilityFactors.map((factor, index) => (
          <Badge key={index} variant="outline" className="text-xs">
            {factor}
          </Badge>
        ))}
      </div>
    </div>
  );
}

export default VulnerabilityBadge;