// src/components/ui/VulnerabilityIndicator.tsx
// Fixed version without tooltip dependency and corrected types

import React from 'react';
import { AlertTriangle, Shield, Info } from 'lucide-react';
import { Badge } from '@/components/ui/Badge';
import type { VulnerabilityAssessment } from '@/types/client';

interface VulnerabilityIndicatorProps {
  assessment?: VulnerabilityAssessment | null;
  variant?: 'badge' | 'icon' | 'detailed';
  showFactors?: boolean;
  className?: string;
}

export function VulnerabilityIndicator({ 
  assessment, 
  variant = 'badge',
  showFactors = false,
  className = ''
}: VulnerabilityIndicatorProps) {
  // Check if vulnerable - handle boolean type only
  const isVulnerable = assessment?.is_vulnerable === true;

  // If not vulnerable and not showing non-vulnerable status, return null
  if (!isVulnerable && variant !== 'detailed') {
    return null;
  }

  // Get vulnerability factors - using correct property name
  const factors = assessment?.vulnerabilityFactors || [];
  const hasFactors = factors.length > 0;

  // Icon variant - just shows an icon with title attribute
  if (variant === 'icon') {
    return (
      <div 
        className={`inline-flex items-center ${className}`}
        title={isVulnerable ? `Vulnerable Client${hasFactors ? ` - Factors: ${factors.join(', ')}` : ''}` : 'Not Vulnerable'}
      >
        {isVulnerable ? (
          <AlertTriangle className="h-4 w-4 text-amber-600" />
        ) : (
          <Shield className="h-4 w-4 text-green-600" />
        )}
      </div>
    );
  }

  // Badge variant - shows a colored badge
  if (variant === 'badge') {
    if (!isVulnerable) return null;
    
    return (
      <div 
        className={className}
        title={hasFactors ? `Vulnerability factors: ${factors.join(', ')}` : undefined}
      >
        <Badge variant="warning">
          <AlertTriangle className="h-3 w-3 mr-1" />
          Vulnerable
          {showFactors && hasFactors && (
            <span className="ml-1 text-xs">({factors.length})</span>
          )}
        </Badge>
      </div>
    );
  }

  // Detailed variant - shows full status with factors
  if (variant === 'detailed') {
    return (
      <div className={`space-y-2 ${className}`}>
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">Vulnerability Status:</span>
          {isVulnerable ? (
            <Badge variant="warning">
              <AlertTriangle className="h-3 w-3 mr-1" />
              Vulnerable
            </Badge>
          ) : (
            <Badge variant="default" className="bg-green-100 text-green-800">
              <Shield className="h-3 w-3 mr-1" />
              Not Vulnerable
            </Badge>
          )}
        </div>
        
        {isVulnerable && hasFactors && (
          <div className="ml-4">
            <p className="text-xs text-gray-600 mb-1">Vulnerability Factors:</p>
            <div className="flex flex-wrap gap-1">
              {factors.map((factor: string, index: number) => (
                <Badge key={index} variant="outline" className="text-xs">
                  {factor}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {assessment?.assessmentNotes && (
          <div className="ml-4">
            <p className="text-xs text-gray-600 mb-1">Notes:</p>
            <p className="text-xs text-gray-700">{assessment.assessmentNotes}</p>
          </div>
        )}

        {assessment?.reviewDate && (
          <div className="ml-4 flex items-center gap-1 text-xs text-gray-600">
            <Info className="h-3 w-3" />
            Next review: {new Date(assessment.reviewDate).toLocaleDateString()}
          </div>
        )}
      </div>
    );
  }

  return null;
}

// Export utility function to check vulnerability across the platform
export function isClientVulnerable(assessment?: VulnerabilityAssessment | null): boolean {
  return assessment?.is_vulnerable === true;
}

// Simple vulnerability badge for quick use
export function VulnerabilityBadge({ client }: { client: any }) {
  const isVulnerable = client?.vulnerabilityAssessment?.is_vulnerable === true ||
                       client?.vulnerability_assessment?.is_vulnerable === true;
  
  if (!isVulnerable) return null;
  
  return (
    <Badge variant="warning" className="text-xs">
      <AlertTriangle className="h-3 w-3 mr-1" />
      Vulnerable
    </Badge>
  );
}