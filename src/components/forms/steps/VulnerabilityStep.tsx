// src/components/forms/steps/VulnerabilityStep.tsx - FCA vulnerability assessment
'use client'
import { useState } from 'react'
import { VulnerabilityAssessment, VulnerabilityType } from '@/types'
import { AlertTriangle, Shield, Heart, Users } from 'lucide-react'

interface VulnerabilityStepProps {
  vulnerabilityAssessment: VulnerabilityAssessment
  onChange: (updates: Partial<VulnerabilityAssessment>) => void
  errors: string[]
}

export const VulnerabilityStep = ({ vulnerabilityAssessment, onChange, errors }: VulnerabilityStepProps) => {
  const [localAssessment, setLocalAssessment] = useState(vulnerabilityAssessment)

  const handleVulnerabilityToggle = (type: VulnerabilityType) => {
    let newTypes = [...localAssessment.vulnerabilityTypes]
    
    if (type === 'none') {
      // If "None" is selected, clear all other vulnerabilities
      newTypes = ['none']
    } else {
      // Remove "none" if another vulnerability is selected
      newTypes = newTypes.filter(t => t !== 'none')
      
      if (newTypes.includes(type)) {
        newTypes = newTypes.filter(t => t !== type)
      } else {
        newTypes.push(type)
      }
      
      // If no vulnerabilities selected, default to "none"
      if (newTypes.length === 0) {
        newTypes = ['none']
      }
    }

    const hasVulnerabilities = !newTypes.includes('none') && newTypes.length > 0

    const updates = {
      ...localAssessment,
      vulnerabilityTypes: newTypes,
      hasVulnerabilities
    }

    setLocalAssessment(updates)
    onChange(updates)
  }

  const handleFieldChange = (field: keyof VulnerabilityAssessment, value: any) => {
    const updates = { ...localAssessment, [field]: value }
    setLocalAssessment(updates)
    onChange(updates)
  }

  const vulnerabilityOptions = [
    {
      type: 'health' as VulnerabilityType,
      label: 'Health',
      description: 'Physical or mental health conditions affecting decision-making',
      icon: Heart,
      color: 'text-red-600'
    },
    {
      type: 'life_events' as VulnerabilityType,
      label: 'Life Events',
      description: 'Recent bereavement, divorce, job loss, or major life changes',
      icon: Users,
      color: 'text-orange-600'
    },
    {
      type: 'resilience' as VulnerabilityType,
      label: 'Financial Resilience',
      description: 'Low financial resilience or ability to withstand losses',
      icon: Shield,
      color: 'text-yellow-600'
    },
    {
      type: 'capability' as VulnerabilityType,
      label: 'Financial Capability',
      description: 'Low financial capability, confidence, or understanding',
      icon: AlertTriangle,
      color: 'text-blue-600'
    }
  ]

  return (
    <div className="space-y-6">
      {/* Vulnerability Indicators */}
      <div>
        <div className="flex items-center space-x-2 mb-4">
          <AlertTriangle className="h-5 w-5 text-amber-600" />
          <h3 className="text-lg font-medium text-gray-900">Vulnerability Indicators</h3>
        </div>
        
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p className="text-sm text-blue-800">
            <strong>FCA Guidance:</strong> Identify any client vulnerabilities that may affect their ability to make 
            informed decisions or engage with financial services. Consider both temporary and permanent vulnerabilities.
          </p>
        </div>

        <div className="space-y-4">
          {vulnerabilityOptions.map((option) => {
            const IconComponent = option.icon
            const isSelected = localAssessment.vulnerabilityTypes.includes(option.type)
            
            return (
              <div
                key={option.type}
                className={`border rounded-lg p-4 cursor-pointer transition-all ${
                  isSelected 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => handleVulnerabilityToggle(option.type)}
              >
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => {}} // Handled by parent div onClick
                      className="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <IconComponent className={`h-5 w-5 ${option.color}`} />
                      <h4 className="text-sm font-medium text-gray-900">{option.label}</h4>
                    </div>
                    <p className="text-sm text-gray-600 mt-1">{option.description}</p>
                  </div>
                </div>
              </div>
            )
          })}

          {/* None Option */}
          <div
            className={`border rounded-lg p-4 cursor-pointer transition-all ${
              localAssessment.vulnerabilityTypes.includes('none')
                ? 'border-green-500 bg-green-50' 
                : 'border-gray-200 hover:border-gray-300'
            }`}
            onClick={() => handleVulnerabilityToggle('none')}
          >
            <div className="flex items-start space-x-3">
              <div className="flex-shrink-0">
                <input
                  type="checkbox"
                  checked={localAssessment.vulnerabilityTypes.includes('none')}
                  onChange={() => {}}
                  className="mt-1 h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                />
              </div>
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <Shield className="h-5 w-5 text-green-600" />
                  <h4 className="text-sm font-medium text-gray-900">No Vulnerabilities Identified</h4>
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  Client does not display any vulnerability characteristics requiring special consideration
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Vulnerability Details */}
      {localAssessment.hasVulnerabilities && (
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">Vulnerability Details</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Vulnerability Description
              </label>
              <textarea
                value={localAssessment.healthVulnerabilities || ''}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('healthVulnerabilities', e.target.value)}
                rows={3}
                className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                placeholder="Provide details of the vulnerabilities identified..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Adaptations Made to Advice Process
              </label>
              <textarea
                value={localAssessment.adaptationsMade}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('adaptationsMade', e.target.value)}
                rows={3}
                className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                placeholder="Describe any adaptations made to ensure fair treatment..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Additional Support Required
              </label>
              <textarea
                value={localAssessment.supportRequired}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('supportRequired', e.target.value)}
                rows={2}
                className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                placeholder="Note any ongoing support requirements..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Review Frequency
              </label>
              <select
                value={localAssessment.reviewFrequency}
                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleFieldChange('reviewFrequency', e.target.value)}
                className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
              >
                <option value="standard">Standard (Annual)</option>
                <option value="enhanced">Enhanced (Bi-annual)</option>
                <option value="frequent">Frequent (Quarterly)</option>
              </select>
              <p className="text-xs text-gray-500 mt-1">
                Recommended review frequency based on vulnerability assessment
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Consumer Duty Notice */}
      <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
        <div className="flex items-start space-x-2">
          <AlertTriangle className="h-5 w-5 text-amber-600 flex-shrink-0 mt-0.5" />
          <div>
            <h4 className="text-sm font-medium text-amber-800">Consumer Duty Requirements</h4>
            <p className="text-sm text-amber-700 mt-1">
              If vulnerabilities are identified, ensure appropriate support is provided and documented. 
              Consider simplified communication methods, additional time for decisions, and enhanced monitoring.
            </p>
          </div>
        </div>
      </div>

      {/* Error Display */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-red-800 mb-2">Please correct the following errors:</h4>
          <ul className="text-sm text-red-700 space-y-1">
            {errors.map((error, index) => (
              <li key={index}>• {error}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}